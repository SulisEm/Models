__includes [ "environment.nls" ]   ;; the serpentine queue / wall of the model

;; agents definition
breed [ customers customer ]
breed [ workers worker ]

turtles-own [      ; common variables for all agents
  state            ; "waiting", "moving", "working" -- only for workers: "free", "backoffice"
  working-with     ; the other agent to work with
]

workers-own [      ; variables of "workers" agents
  worker-desk      ; the desk/position of the operator

  work-duration    ; used to compute the duration of the work with customers

  kpi-time-start-working     ; KPI variables - the time at which an operator start working with a customer
  kpi-time-start-waiting     ; the time when the operator start waiting for a customer
  kpi-time-start-backoffice  ; the time at which an operator start backoffice work

  kpi-worker-time-waiting    ; the sum of the waiting time of an operator
  kpi-worker-time-working    ; the sum of the working time of an operator
  kpi-worker-time-backoffice ; the sum of the back-office work time
]

customers-own [         ; variables of "customers" agents
  destination           ; the "patch" where the agents (customers) have to go

  kpi-time-start ; customer's KPI: the moment an operator arrives in the area
  kpi-time-arrival-at-serpentine-start ; the moment a customer enter the serpentine queue
  kpi-time-arrival-at-waiting-line     ; the moment a customer arrives at the end of the queue
  kpi-time-starting-served-at-desk     ; the moment a customer arrives at the operator desk
]

;; environment variables
patches-own [        ; patches variables
  pname              ; to identify relevant areas/patches ("arrival", "waiting line", "worker-desk", "exit")
]

;; global variables
globals [
  next-arrival-time-customer
  kpi-tot-served        ; KPI: the number of customers served in the process
  kpi-cycle-time        ; KPI: the throughput time or cycle time (from arrival to exit)
  kpi-queue-to-desk     ; KPI: the time spent from the queue to the operator desk
]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       SETUP       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup
  ca
  setup-variables  ;; initialize the variables
  build-walls      ;; create the environment
  setup-workers    ;; initialize the operators
  reset-ticks
end

;;;;;;;;;;;;;; SETUP PROCEDURES  ;;;;;;;;;;;;;;;

;;; individual setup

to setup-world     ; individual setup: the environment
  ca
  setup-variables  ; setup variables
  build-walls      ; setup wall
end

to setup-variables                              ; individual setup: general variables
  set-default-shape turtles "person"            ; the shape of agents
  set next-arrival-time-customer 1 + random 15  ; the next arrival time of the first customer
end

to setup-workers
  if any? workers [                             ; (if exists?) delete previous workers configuration
    ask workers [
      ask patch-ahead 3 [ set pcolor brown ]    ; restore initial color of desks
      die
    ]
  ]

  ; set the physical places (employees' desks)
  let list-positions [ -8 -6 -4 -2 0 2 4 6 8 ]  ; a list with all the possible operators' xcor position

  ; procedure to create operators
  create-workers n-workers [                    ; the amount of agents is defined by a slider in Interface
    let pos random length (list-positions)      ; randomly find a x-value from the list
    let x item pos list-positions
    set list-positions remove-item pos list-positions  ; remove the x-value from the list
    setxyz x -15 1                              ; the position of the agent

    ifelse random 2 = 0
        [ set color 43 ][ set color 42]         ; random color (2 options, value 42 and 43)

    set state "free"                            ; initial state of worker: "free"

    set heading 0                               ; turn the head of workers towards the customers/desk
    set worker-desk patch-ahead 5               ; set the desk of the worker to receive customers
    ask patch-ahead 5 [ set pname "worker-desk" ] ; set the corresponding patch with "desk" name
    ask patch-ahead 3 [ set pcolor 36 ]         ; 56 is brown color (see Color Swtches in Tool menu)

    set kpi-time-start-working 0         ; initialize all KPIs to 0
    set kpi-time-start-waiting 0
    set kpi-worker-time-working 0
    set kpi-worker-time-waiting 0
    set kpi-worker-time-backoffice 0
  ]
  reset-ticks
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; MAIN CYCLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to go
  tick
  if ticks = 28880 or (kpi-tot-served > 0 and not any? customers) [ stop ]  ; the stop condition: 1 day or (already started and no more customers)
  check-arrival                ; start (new) agents to move
  check-moving                 ; forward agents if their state is "moving"
  check-workers-backoffice     ; workers check back-office
  check-workers-waiting-cust   ; workers check for waiting customers
  check-workers-working-cust   ; workers check for working with customers
  check-working-time           ; check if the work time on the task is finished
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; main cycle PROCEDURES ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to check-arrival
  if next-arrival-time-customer = ticks and count customers != n-customers
    [
      create-customers 1 [                      ; create new customers
        set destination "arrival"               ; the first destination in the "arrival" line
        set state "moving"                      ; change the state from "waitin" to "moving"
        set kpi-time-start ticks                ; set the value of arrival time (ticks) in the area

        ifelse random 10 < 4 [ set color 22 ][  ; set the color of the customer selecting one of the three 22--72--92
          ifelse random 10 < 6 [ set color 72][set color 92]
        ]

        setxyz (-14 + random 3 ) 14 1           ; the coordinates
        face one-of patches with [ pname = [destination] of myself ] ; turn the face according to destination
        if view-path? [ pd ]                    ; track or not the agent's path
      ]
  set next-arrival-time-customer ticks + min-value + int (random (max-value - min-value + 0.5))
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; check moving ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to check-moving
  ask customers with [state = "moving"]
    [ if [pname] of patch-here = destination  ; if arrived at destination
      [ ifelse destination != "worker-desk"
        [ set state "waiting"
          if destination = "waiting-line"
            [ set kpi-time-arrival-at-waiting-line ticks ]
        ]
        [
          if patch-here = [worker-desk] of working-with [ set state "waiting" ]
        ]
      ]

      if state = "moving"
      [
        ifelse ([pcolor] of patch-ahead 1 = wall-color
          or [pcolor] of patch-ahead 2 = wall-color)
        [
          set state "waiting"
          update-sensors
          set state "moving"
        ]
        [ ; stop if any other customer ahead (in the maze / top of the screen)
          if ycor <= -7 or
          ( not any? other customers-on patch-ahead 2 ;and not any? customers-on patch-ahead 2
            and not any? other customers-on patch-right-and-ahead 40 2 and not any? other customers-on patch-left-and-ahead 40 2
            and not any? other customers-on patch-right-and-ahead 20 2 and not any? other customers-on patch-left-and-ahead 20 2
          )
          [
            fd 1
            if [pname] of patch-here = "exit"
                [ if not any? other customers
                    [ ask workers
                      [ set kpi-worker-time-waiting kpi-worker-time-waiting + (ticks - kpi-time-start-waiting ) + 1 ]
                  ]
                  die
            ]
          ]
        ]
      ]
  ]

  ask customers with [ state = "waiting" and [pname] of patch-here = "arrival" ]
    [
      set state "moving"
      set heading 180
      set destination "waiting-line"
      set kpi-time-arrival-at-serpentine-start ticks
    ]
end

to update-sensors   ; customers sense the environment and eventually rotate the head on the left/right
  let wall-on-the-left ([pcolor] of patch-left-and-ahead 90 1 = wall-color or [pcolor] of patch-left-and-ahead 90 2 = wall-color or [pcolor] of patch-left-and-ahead 90 3 = wall-color)
  let wall-on-the-right ([pcolor] of patch-right-and-ahead 90 1 = wall-color or [pcolor] of patch-right-and-ahead 90 2 = wall-color or [pcolor] of patch-right-and-ahead 90 3 = wall-color)

  if wall-on-the-left [ set heading heading + 90 ]
  if wall-on-the-right [ set heading heading - 90 ]
end

to check-workers-backoffice
  ;; workers may have some back-office work to perform
  if any? workers with [state = "free"]
    [
      ask one-of workers with [state = "free"]
      [
        ; perform back-office work (depending on initial percentage or if not any other customers)
        if random 100 < backoffice-% or count customers < n-workers
        [
          set state "backoffice"
          set work-duration ticks + 20 + random 100
          set kpi-worker-time-backoffice kpi-worker-time-backoffice + (ticks - kpi-time-start-waiting)
          set kpi-time-start-backoffice ticks
        ]
      ]
    ]
end

to check-workers-waiting-cust
  ;; call a customer if ready on the waiting line
  if any? workers with [state = "free"]
  [
    ask one-of workers with [state = "free"]
      [
        ; call a customer if ready on the waiting line
        if any? customers with [state = "waiting" and [pname] of patch-here = "waiting-line"]
        [
          let cust one-of customers with [state = "waiting" and [pname] of patch-here = "waiting-line"]
          set state "waiting"
          set working-with cust

          call-a-customer self cust
        ]
    ]
  ]
end

to check-workers-working-cust
  ;check workers waiting: if any? customers are waiting on their desk...
  if any? workers with [state = "waiting"]
  [
    ask one-of workers with [state = "waiting"]
    [ ; call a customer if waiting on the worker desk
      if any? customers with [state = "waiting" and patch-here = [worker-desk] of myself ]
      [
        set state "working"
        set work-duration ticks + 60 + random 60

        set kpi-worker-time-waiting kpi-worker-time-waiting + (ticks - kpi-time-start-waiting)

        set kpi-time-start-working ticks

        ask one-of customers with [ state = "waiting" and patch-here = [worker-desk] of myself ]
          [
            set state "working"
            set kpi-time-starting-served-at-desk ticks
            compute-kpi-queue-to-desk (kpi-time-starting-served-at-desk  - kpi-time-arrival-at-serpentine-start )
          ]
      ]
    ]
  ]
end

to compute-kpi-queue-to-desk[t]
  ifelse kpi-tot-served = 0 [ set kpi-queue-to-desk t ]
  [
    set kpi-queue-to-desk ((kpi-queue-to-desk * kpi-tot-served) + t) / kpi-tot-served
  ]
end


to  call-a-customer [w c]
  ask c [
    set working-with w
    face [worker-desk] of w
    set destination "worker-desk"
    set state "moving"
  ]
end

to check-working-time
  ask workers with [state = "backoffice"]
  [
    if work-duration = ticks
      [
        set kpi-worker-time-backoffice kpi-worker-time-backoffice + (ticks - kpi-time-start-backoffice)
        set kpi-time-start-waiting ticks
        set state "free"
    ]
   ]

  ask workers with [state = "working"]
  [
    if work-duration = ticks
      [
        set kpi-worker-time-working kpi-worker-time-working + (ticks - kpi-time-start-working) ;- 1
        set kpi-time-start-waiting ticks
        set state "free"

        ask working-with [
          compute-kpi-cycle-time (ticks - kpi-time-start)
          set state "moving" set heading 290 set destination "exit" face one-of patches with [pname = "exit"]
          ]
        set working-with nobody
    ]
   ]
end

to compute-kpi-cycle-time[t]  ; update KPI (and monitors)
  ifelse kpi-tot-served = 0 [ set kpi-cycle-time t ]
  [
    set kpi-cycle-time ((kpi-cycle-time * kpi-tot-served) + t) / kpi-tot-served
  ]
  set kpi-tot-served kpi-tot-served + 1
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
437
438
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-16
16
-16
16
-4
4
1
0
1
ticks
30.0

BUTTON
245
259
317
304
WORLD
setup-world
NIL
1
T
OBSERVER
NIL
W
NIL
NIL
1

BUTTON
75
294
141
341
GO
go
T
1
T
OBSERVER
NIL
G
NIL
NIL
1

BUTTON
142
308
199
341
go-once
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SWITCH
273
185
404
218
view-path?
view-path?
1
1
-1000

SLIDER
19
173
269
206
n-workers
n-workers
1
9
6.0
1
1
NIL
HORIZONTAL

BUTTON
322
259
404
304
WORKERS
setup-workers
NIL
1
T
OBSERVER
NIL
O
NIL
NIL
1

SLIDER
19
83
269
116
n-customers
n-customers
1
10000
50.0
1
1
NIL
HORIZONTAL

CHOOSER
273
139
404
184
type-queue
type-queue
"short" "long"
1

MONITOR
298
452
403
497
NIL
kpi-cycle-time
1
1
11

TEXTBOX
43
397
135
415
CUSTOMERS\n
15
103.0
1

MONITOR
298
404
403
449
NIL
kpi-tot-served
17
1
11

MONITOR
254
498
403
543
NIL
kpi-queue-to-desk
1
1
11

BUTTON
17
294
74
341
SETUP
setup
NIL
1
T
OBSERVER
NIL
S
NIL
NIL
1

MONITOR
146
547
269
592
Avg. Working Time
mean [kpi-worker-time-working] of workers
1
1
11

MONITOR
272
547
403
592
Avg. Waiting Time
mean [kpi-worker-time-waiting] of workers
1
1
11

TEXTBOX
152
260
277
296
or individual setup setup
15
72.0
1

TEXTBOX
152
463
291
481
Throughput time:
14
0.0
1

TEXTBOX
159
422
363
442
Customers served:
14
0.0
1

TEXTBOX
104
518
261
536
From queue to desk:
14
0.0
1

TEXTBOX
24
267
115
285
FULL SETUP
14
22.0
1

TEXTBOX
44
484
122
523
WORKERS
15
92.0
1

TEXTBOX
15
13
453
35
Queue simulation - Arrival to a customer service 
16
12.0
1

TEXTBOX
21
63
84
81
Settings
14
32.0
1

TEXTBOX
280
121
336
139
Options
14
12.0
1

MONITOR
298
360
403
405
# customers
count customers
0
1
11

TEXTBOX
167
375
316
394
N° of customers:
14
0.0
1

SLIDER
19
139
269
172
backoffice-%
backoffice-%
0
100
10.0
1
1
NIL
HORIZONTAL

MONITOR
6
547
144
592
Avg. Back-office Time
mean [kpi-worker-time-backoffice] of workers
1
1
11

PLOT
410
450
712
593
Average time of workers
NIL
NIL
0.0
10.0
0.0
10.0
true
true
"" ""
PENS
"backoffice" 1.0 0 -15390905 true "" "plot mean [kpi-worker-time-backoffice] of workers"
"waiting" 1.0 0 -7500403 true "" "plot mean [kpi-worker-time-waiting] of workers"
"working" 1.0 0 -2674135 true "" "plot mean [kpi-worker-time-working] of workers"

BUTTON
339
308
404
341
NIL
clear-plot
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

INPUTBOX
273
56
338
116
min-value
5.0
1
0
Number

INPUTBOX
339
56
404
116
max-value
25.0
1
0
Number

TEXTBOX
289
37
460
55
Interarrival-time (min-max):
14
52.0
1

TEXTBOX
20
351
228
369
PERFORMANCE INDICATORS
15
104.0
1

SLIDER
273
219
404
252
wall-color
wall-color
0
139
4.0
1
1
NIL
HORIZONTAL

BUTTON
214
219
269
252
Default
set wall-color 4\nset view-path? False\nset type-queue \"long\"\nset backoffice-% 10\nset n-workers 6  
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

@#$#@#$#@
## WHAT IS IT?

The model Serpentine Queue describes people arriving in a (serpentine) queue waiting to reach the desk of an operator service. This can be the case of arrivals in a bank or in an airport. 
Customers move to the desk of operators to work, then exit the process. Performance metrics involves timing of customers, as well as the working/waiting time of operators.

## HOW IT WORKS

Customers move and wait. Each operation may last from 60 to 120 ticks. 
The simulation stops when there are no more agents in the queue. 

## HOW TO USE IT

Setup the number of operators and add the desired number of people. 
KPIs describe the performance of the scenario.

## THINGS TO NOTICE

Short and long track; optionally, you can keep traces of path.

## THINGS TO TRY

Try different configuration setting: test parameter sweeping with  behaviourspace.

## EXTENDING THE MODEL

Customers can abandon the queue.
Improve time the duration of activities.

## CREDITS AND REFERENCES

Emilio Sulis [emilio.sulis@unito.it](mailto:emilio.sulis@unito.it)

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.2.0
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="01-experiment" repetitions="10" runMetricsEveryStep="false">
    <setup>setup</setup>
    <go>go</go>
    <exitCondition>kpi-tot-served &gt; 0 and not any? customers</exitCondition>
    <metric>ticks</metric>
    <metric>kpi-cycle-time</metric>
    <metric>mean [kpi-worker-time-working] of workers</metric>
    <enumeratedValueSet variable="n-customers">
      <value value="100"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="n-workers">
      <value value="2"/>
      <value value="4"/>
      <value value="6"/>
      <value value="8"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
